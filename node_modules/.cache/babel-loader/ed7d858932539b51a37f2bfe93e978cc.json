{"ast":null,"code":"var _jsxFileName = \"/Users/tagawahirotaka/Desktop/programing/yahooapp/src/components/Ranking.js\";\nimport React from 'react';\nimport Card, { CardMedia, CardContent, CardActions } from 'material-ui/Card';\nimport Typography from 'material-ui/Typography';\nimport Button from 'material-ui/Button';\nimport PropTypes from 'prop-types';\nconst name_s = {\n  color: \"red\"\n};\nconst card_s = {\n  color: \"gold\"\n};\nexport default class Ranking extends React.Component {\n  componentWillMount() {\n    this.props.onMount(this.props.categoryId);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.categoryId !== nextProps.categoryId) {\n      this.props.onUpdate(nextProps.categoryId);\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          category = _this$props.category,\n          ranking = _this$props.ranking,\n          error = _this$props.error;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      style: name_s,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, typeof category !== 'undefined' ? \"\".concat(category.name, \"\\u306E\\u30E9\\u30F3\\u30AD\\u30F3\\u30B0\") : ''), (() => {\n      if (error) {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, \"\\u30A8\\u30E9\\u30FC\\u304C\\u767A\\u751F\\u3057\\u307E\\u3057\\u305F\\u3002\\u30EA\\u30ED\\u30FC\\u30C9\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\");\n      } else if (typeof ranking === 'undefined') {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }, \"\\u3061\\u3087\\u3063\\u3068\\u5F85\\u3063\\u3066\\uFF01\\uFF01\\uFF01\");\n      } else {\n        return ranking.map((item, i) => React.createElement(Card, {\n          key: \"ranking-item-\".concat(item.code),\n          style: {\n            maxWidth: '500px',\n            margin: '32px auto'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, React.createElement(CardMedia, {\n          image: item.imageUrl,\n          title: \"\".concat(i + 1, \"\\u4F4D  \").concat(item.name),\n          style: {\n            height: '200px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }), React.createElement(CardContent, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, React.createElement(Typography, {\n          type: \"title\",\n          style: card_s,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, \"\".concat(i + 1, \"\\u4F4D\")), React.createElement(Typography, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, \"\".concat(item.name))), React.createElement(CardActions, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, React.createElement(Button, {\n          raised: true,\n          color: \"secondary\",\n          fullWidth: true,\n          href: item.url,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, \"\\u5546\\u54C1\\u30DA\\u30FC\\u30B8\\u3078\"))));\n      }\n    })());\n  }\n\n}\nRanking.propTypes = {\n  categoryId: PropTypes.string.isRequired,\n  onMount: PropTypes.func.isRequired,\n  onUpdate: PropTypes.func.isRequired,\n  category: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired\n  }),\n  ranking: PropTypes.arrayOf(PropTypes.shape({\n    code: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired,\n    imageUrl: PropTypes.string.isRequired\n  })),\n  error: PropTypes.bool.isRequired\n};\nRanking.defaultProps = {\n  categoryId: '1'\n};","map":{"version":3,"sources":["/Users/tagawahirotaka/Desktop/programing/yahooapp/src/components/Ranking.js"],"names":["React","Card","CardMedia","CardContent","CardActions","Typography","Button","PropTypes","name_s","color","card_s","Ranking","Component","componentWillMount","props","onMount","categoryId","componentWillReceiveProps","nextProps","onUpdate","render","category","ranking","error","name","map","item","i","code","maxWidth","margin","imageUrl","height","url","propTypes","string","isRequired","func","shape","id","arrayOf","bool","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Card, { CardMedia, CardContent,CardActions} from 'material-ui/Card';\nimport Typography from 'material-ui/Typography';\nimport Button from 'material-ui/Button';\nimport PropTypes from 'prop-types';\n\nconst name_s =  {\n  color:\"red\"\n}\n\nconst card_s = {\n  color:\"gold\"\n}\n\nexport default class Ranking extends React.Component {\n  componentWillMount() {\n    this.props.onMount(this.props.categoryId);\n  }\n  componentWillReceiveProps(nextProps) {\n    if (this.props.categoryId !== nextProps.categoryId) {\n      this.props.onUpdate(nextProps.categoryId);\n    }\n  }\n\n  render() {\n    const { category, ranking, error } = this.props;\n\n    return (\n      <div >\n        <h2 style={name_s}>{\n          typeof category !== 'undefined'\n            ? `${category.name}のランキング`\n            : ''\n        }</h2>\n\n        {(() => {\n          if (error) {\n            return <p>エラーが発生しました。リロードしてください。</p>;\n          } else if (typeof ranking === 'undefined') {\n\n            return <p>ちょっと待って！！！</p>;\n          } else {\n\n            return ranking.map((item, i) =>(\n                <Card\n                  key={`ranking-item-${item.code}`}\n                  style={{maxWidth: '500px',margin: '32px auto'}}\n                >\n                <CardMedia\n                 image={item.imageUrl}\n                 title={`${i + 1}位  ${item.name}`}\n                 style={{height:'200px'}}\n                />\n                <CardContent>\n                    <Typography type=\"title\" style={card_s}>\n                        {`${i + 1}位`}\n                    </Typography>\n                    <Typography>\n                        {`${item.name}`}\n                    </Typography>\n                </CardContent>\n                <CardActions>\n                  <Button\n                   raised\n                   color=\"secondary\"\n                   fullWidth\n                   href={item.url}\n                   >商品ページへ</Button>\n                </CardActions>\n                </Card>\n\n            ));\n            }\n        })()}\n      </div>\n    );\n  }\n}\n\nRanking.propTypes = {\n  categoryId: PropTypes.string.isRequired,\n  onMount: PropTypes.func.isRequired,\n  onUpdate: PropTypes.func.isRequired,\n\n\n  category: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }),\n  ranking: PropTypes.arrayOf(\n    PropTypes.shape({\n      code: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      url: PropTypes.string.isRequired,\n      imageUrl: PropTypes.string.isRequired,\n    })\n  ),\n  error: PropTypes.bool.isRequired\n};\nRanking.defaultProps = {\n    categoryId: '1'\n};"]},"metadata":{},"sourceType":"module"}