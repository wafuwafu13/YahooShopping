{"ast":null,"code":"import fetchJsonp from 'fetch-jsonp';\nimport qs from 'qs';\nimport { replace } from 'react-router-redux';\nconst API_URL = 'https://shopping.yahooapis.jp/ShoppingWebService/V1/json/categoryRanking';\nconst APP_ID = 'dj00aiZpPUtSZWFsd0M4aUpDSyZzPWNvbnN1bWVyc2VjcmV0Jng9MDU-';\n\nconst startRequest = category => ({\n  type: 'START_REQUEST',\n  payload: {\n    category\n  }\n});\n\nconst receiveData = (category, error, response) => ({\n  type: 'RECEIVE_DATA',\n  payload: {\n    category,\n    error,\n    response\n  }\n});\n\nconst finishRequest = category => ({\n  type: 'FINISH_REQUEST',\n  payload: {\n    category\n  }\n});\n\nexport const fetchRanking = categoryId => {\n  return async (dispatch, getState) => {\n    const categories = getState().shopping.categories;\n    const category = categories.find(category => category.id === categoryId);\n\n    if (typeof category === 'undefined') {\n      dispatch(replace('/'));\n      return;\n    }\n\n    dispatch(startRequest(category));\n    const queryString = qs.stringify({\n      appid: APP_ID,\n      category_id: categoryId\n    });\n\n    try {\n      const responce = await fetchJsonp(\"\".concat(API_URL, \"?\").concat(queryString));\n      const data = await responce.json();\n      dispatch(receiveData(category, null, data));\n    } catch (err) {\n      dispatch(receiveData(category, err));\n    }\n\n    dispatch(finishRequest(category));\n  };\n};","map":{"version":3,"sources":["/Users/tagawahirotaka/Desktop/programing/yahooapp/src/actions/Ranking.js"],"names":["fetchJsonp","qs","replace","API_URL","APP_ID","startRequest","category","type","payload","receiveData","error","response","finishRequest","fetchRanking","categoryId","dispatch","getState","categories","shopping","find","id","queryString","stringify","appid","category_id","responce","data","json","err"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,aAAvB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,SAASC,OAAT,QAAwB,oBAAxB;AAEA,MAAMC,OAAO,GAAG,0EAAhB;AACA,MAAMC,MAAM,GAAG,0DAAf;;AAGA,MAAMC,YAAY,GAAGC,QAAQ,KAAK;AAChCC,EAAAA,IAAI,EAAE,eAD0B;AAEhCC,EAAAA,OAAO,EAAE;AAAEF,IAAAA;AAAF;AAFuB,CAAL,CAA7B;;AAIA,MAAMG,WAAW,GAAG,CAACH,QAAD,EAAWI,KAAX,EAAkBC,QAAlB,MAAgC;AAClDJ,EAAAA,IAAI,EAAE,cAD4C;AAElDC,EAAAA,OAAO,EAAE;AAAEF,IAAAA,QAAF;AAAYI,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB;AAFyC,CAAhC,CAApB;;AAIA,MAAMC,aAAa,GAAGN,QAAQ,KAAK;AACjCC,EAAAA,IAAI,EAAE,gBAD2B;AAEjCC,EAAAA,OAAO,EAAE;AAAEF,IAAAA;AAAF;AAFwB,CAAL,CAA9B;;AAMA,OAAO,MAAMO,YAAY,GAAGC,UAAU,IAAI;AAExC,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAEnC,UAAMC,UAAU,GAAGD,QAAQ,GAAGE,QAAX,CAAoBD,UAAvC;AACA,UAAMX,QAAQ,GAAGW,UAAU,CAACE,IAAX,CAAgBb,QAAQ,IAAKA,QAAQ,CAACc,EAAT,KAAgBN,UAA7C,CAAjB;;AAEA,QAAI,OAAOR,QAAP,KAAoB,WAAxB,EAAqC;AACnCS,MAAAA,QAAQ,CAACb,OAAO,CAAC,GAAD,CAAR,CAAR;AACA;AACD;;AAEDa,IAAAA,QAAQ,CAACV,YAAY,CAACC,QAAD,CAAb,CAAR;AAEA,UAAMe,WAAW,GAAGpB,EAAE,CAACqB,SAAH,CAAa;AAC/BC,MAAAA,KAAK,EAAEnB,MADwB;AAE/BoB,MAAAA,WAAW,EAAEV;AAFkB,KAAb,CAApB;;AAIA,QAAI;AACF,YAAMW,QAAQ,GAAG,MAAMzB,UAAU,WAAIG,OAAJ,cAAekB,WAAf,EAAjC;AACA,YAAMK,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAAnB;AACAZ,MAAAA,QAAQ,CAACN,WAAW,CAACH,QAAD,EAAW,IAAX,EAAiBoB,IAAjB,CAAZ,CAAR;AACD,KAJD,CAIE,OAAOE,GAAP,EAAY;AACZb,MAAAA,QAAQ,CAACN,WAAW,CAACH,QAAD,EAAWsB,GAAX,CAAZ,CAAR;AACD;;AAEDb,IAAAA,QAAQ,CAACH,aAAa,CAACN,QAAD,CAAd,CAAR;AACD,GAzBD;AA0BD,CA5BM","sourcesContent":["import fetchJsonp from 'fetch-jsonp';\nimport qs from 'qs';\nimport { replace } from 'react-router-redux';\n\nconst API_URL = 'https://shopping.yahooapis.jp/ShoppingWebService/V1/json/categoryRanking';\nconst APP_ID = 'dj00aiZpPUtSZWFsd0M4aUpDSyZzPWNvbnN1bWVyc2VjcmV0Jng9MDU-';\n\n\nconst startRequest = category => ({\n  type: 'START_REQUEST',\n  payload: { category },\n});\nconst receiveData = (category, error, response) => ({\n  type: 'RECEIVE_DATA',\n  payload: { category, error, response },\n});\nconst finishRequest = category => ({\n  type: 'FINISH_REQUEST',\n  payload: { category },\n});\n\n\nexport const fetchRanking = categoryId => {\n\n  return async (dispatch, getState) => {\n\n    const categories = getState().shopping.categories;\n    const category = categories.find(category => (category.id === categoryId));\n\n    if (typeof category === 'undefined') {\n      dispatch(replace('/'));\n      return;\n    }\n\n    dispatch(startRequest(category));\n\n    const queryString = qs.stringify({\n      appid: APP_ID,\n      category_id: categoryId,\n    });\n    try {\n      const responce = await fetchJsonp(`${API_URL}?${queryString}`);\n      const data = await responce.json();\n      dispatch(receiveData(category, null, data));\n    } catch (err) {\n      dispatch(receiveData(category, err));\n    }\n\n    dispatch(finishRequest(category));\n  };\n};"]},"metadata":{},"sourceType":"module"}